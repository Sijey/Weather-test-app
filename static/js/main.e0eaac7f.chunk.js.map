{"version":3,"sources":["api/api.js","actions/weather.js","reducers/weather.js","components/card/Card.js","components/weatherList/WeatherList.js","App.js","index.js"],"names":["loadData","url","fetch","then","response","json","weatherApiLink","forecastApiLink","WEATHER_ACTIONS","loadWeather","dispatch","Promise","all","weather","dailyData","list","filter","reading","dt_txt","includes","forecast","type","handleWeatherWithForecast","catch","payload","initialState","hasError","CardItem","day","ms","dt","dayName","Date","toLocaleDateString","weekday","month","imgURL","id","Card","className","Content","Header","Meta","Math","round","main","temp","Description","description","connect","state","error","load","useEffect","Message","negative","Divider","Button","onClick","map","key","Loader","active","inline","store","createStore","action","applyMiddleware","thunk","App","ReactDOM","render","document","getElementById"],"mappings":"gVAAaA,EAAW,SAAAC,GAAG,OAAIC,MAAMD,GAChCE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,WCGzBC,EAAc,2GAFM,oCAKpBC,EAAe,4GALK,oCAQbC,EACK,iBADLA,EAEG,eAcHC,EAAc,WACzB,OAAO,SAAAC,GAELC,QAAQC,IAAI,CAACZ,EAASM,GAAiBN,EAASO,KAC3CJ,MAAK,YAA0B,IAAD,mBAAvBU,EAAuB,KACrBC,EADqB,KACAC,KAAKC,QAAO,SAAAC,GAAO,OAAIA,EAAQC,OAAOC,SAAS,eAC1ET,EAZ6B,SAACG,EAASO,GAAV,MAAwB,CAC/DC,KAAMb,EACNK,UACAO,YASmBE,CAA0BT,EAASC,KAClC,KAEbS,OAAM,kBAAMb,EApBW,CAC9BW,KAAMb,EACNgB,QAkBwC,wB,ykBCjC1C,IAAMC,EAAe,CACnBC,SAAU,KACVb,QAAS,KACTO,SAAU,I,+DCmBGO,G,OApBE,SAAC,GAAW,IAAVC,EAAS,EAATA,IAEXC,EAAc,IAATD,EAAIE,GACTC,EAAU,IAAIC,KAAKH,GAAII,mBAAmB,KAAM,CAACC,QAAS,OAAQN,IAAK,UAAWO,MAAO,SACzFC,EAAS,WAAaR,EAAIf,QAAQ,GAAGwB,GAAK,UAEhD,OACI,oCACE,kBAACC,EAAA,EAAD,CAAMC,UAAU,cACd,kBAACD,EAAA,EAAKE,QAAN,KACE,kBAACF,EAAA,EAAKG,OAAN,KAAcV,GACd,uBAAGQ,UAAWH,IACd,kBAACE,EAAA,EAAKI,KAAN,KAAYC,KAAKC,MAAMhB,EAAIiB,KAAKC,MAAhC,UACA,kBAACR,EAAA,EAAKS,YAAN,KAAmBnB,EAAIf,QAAQ,GAAGmC,kBCoB/BC,G,OAAAA,aAAQ,SAAAC,GAAK,MAAK,CAC/BrC,QAASqC,EAAMrC,QACfsC,MAAOD,EAAMxB,SACbN,SAAU8B,EAAM9B,aACd,SAAAV,GAAQ,MAAK,CACf0C,KAAM,kBAAM1C,EAASD,SALRwC,EA9BK,SAAC,GAAsC,IAArCpC,EAAoC,EAApCA,QAASO,EAA2B,EAA3BA,SAAU+B,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,KAM9C,GAJAC,qBAAU,WACRD,MACC,CAACA,IAEAD,EACF,OACI,kBAACG,EAAA,EAAD,CAASC,UAAQ,GACf,kBAACD,EAAA,EAAQb,OAAT,KAAiBU,GACjB,kBAACK,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAQC,QAASN,GAAjB,cAGD,GAAIvC,GAAWO,EAAU,CAK9B,OACI,6BACE,yBAAKmB,UAAU,WAAW,kBAAC,EAAD,CAAUX,IAAKf,KACzC,yBAAK0B,UAAU,YANZnB,EAASuC,KAAI,SAAC/B,EAAKS,GAAN,OAAa,kBAAC,EAAD,CAAUT,IAAKA,EAAKgC,IAAKvB,SAU5D,OAAO,kBAACwB,EAAA,EAAD,CAAQC,QAAM,EAACC,OAAO,iBCzB3BC,EAAQC,aHAU,WAAmC,IAAlCf,EAAiC,uDAAzBzB,EAAcyC,EAAW,uCACxD,OAAQA,EAAO7C,MACb,KAAKb,EACH,OAAO,EAAP,GACK0C,EADL,CAEExB,SAAUwC,EAAO1C,UAErB,KAAKhB,EACH,OAAO,EAAP,GACK0C,EADL,CAEErC,QAASqD,EAAOrD,QAChBO,SAAU8C,EAAO9C,WAErB,QACE,OAAO8B,KGdsBiB,YAAgBC,MAUpCC,MARf,WACE,OACI,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,QCPRM,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.e0eaac7f.chunk.js","sourcesContent":["export const loadData = url => fetch(url)\n    .then(response => response.json());\n","import {loadData} from '../api/api';\n\nconst openWeatherApiKey = 'c792484ade42380886f51003cfcaf04d';\n\nconst weatherApiLink = `https://api.openweathermap.org/data/2.5/weather?q=Kharkiv&units=metric&lang=ru&\nmode=json&appid=${openWeatherApiKey}`;\n\nconst forecastApiLink = `https://api.openweathermap.org/data/2.5/forecast?q=Kharkiv&units=metric&lang=ru&\nmode=json&appid=${openWeatherApiKey}`;\n\nexport const WEATHER_ACTIONS = {\n  HANDLE_SUCCESS: 'HANDLE_SUCCESS',\n  HANDLE_ERROR: 'HANDLE_ERROR',\n};\n\nconst handleError = (error) => ({\n  type: WEATHER_ACTIONS.HANDLE_ERROR,\n  payload: error,\n});\n\nexport const handleWeatherWithForecast = (weather, forecast) => ({\n  type: WEATHER_ACTIONS.HANDLE_SUCCESS,\n  weather,\n  forecast,\n});\n\nexport const loadWeather = () => {\n  return dispatch => {\n    let success = false;\n    Promise.all([loadData(weatherApiLink), loadData(forecastApiLink)])\n        .then(([weather, forecast]) => {\n            const dailyData = forecast.list.filter(reading => reading.dt_txt.includes('06:00:00'));\n            dispatch(handleWeatherWithForecast(weather, dailyData));\n            success = true;\n        })\n        .catch(() => dispatch(handleError('Loading failed')));\n  }\n};\n","import {WEATHER_ACTIONS} from '../actions/weather';\n\nconst initialState = {\n  hasError: null,\n  weather: null,\n  forecast: [],\n};\n\n export const reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case WEATHER_ACTIONS.HANDLE_ERROR:\n      return {\n        ...state,\n        hasError: action.payload,\n      };\n    case WEATHER_ACTIONS.HANDLE_SUCCESS:\n      return {\n        ...state,\n        weather: action.weather,\n        forecast: action.forecast,\n      };\n    default:\n      return state;\n  }\n};\n","import React from 'react';\nimport {Card} from 'semantic-ui-react';\nimport './Card.css';\n\nconst CardItem = ({day}) => {\n\n  const ms = day.dt * 1000;\n  const dayName = new Date(ms).toLocaleDateString('ru', {weekday: 'long', day: 'numeric', month: 'long'});\n  const imgURL = \"owf owf-\" + day.weather[0].id + \" owf-5x\";\n\n  return (\n      <>\n        <Card className='claim_card'>\n          <Card.Content>\n            <Card.Header>{dayName}</Card.Header>\n            <i className={imgURL} />\n            <Card.Meta>{Math.round(day.main.temp)} Â°C</Card.Meta>\n            <Card.Description>{day.weather[0].description}</Card.Description>\n          </Card.Content>\n        </Card>\n      </>\n  )\n};\n\nexport default CardItem;\n","import React, {useEffect} from 'react';\nimport {connect} from 'react-redux';\nimport {loadWeather} from '../../actions/weather';\nimport {Message, Divider, Button, Loader} from 'semantic-ui-react';\nimport CardItem from '../card/Card';\nimport './WeatherList.css';\n\nconst WeatherList = ({weather, forecast, error, load}) => {\n\n  useEffect(() => {\n    load();\n  }, [load]);\n\n  if (error) {\n    return (\n        <Message negative>\n          <Message.Header>{error}</Message.Header>\n          <Divider />\n          <Button onClick={load}>Try again</Button>\n        </Message>\n    );\n  } else if (weather && forecast) {\n    const forecastCard = () => {\n      return forecast.map((day, id) => <CardItem day={day} key={id} />)\n    };\n\n    return (\n        <div>\n          <div className='weather' ><CardItem day={weather} /></div>\n          <div className='forecast'>{forecastCard()}</div>\n        </div>\n    )\n  } else {\n    return <Loader active inline='centered' />\n  }\n};\n\nexport default connect(state => ({\n  weather: state.weather,\n  error: state.hasError,\n  forecast: state.forecast,\n}), dispatch => ({\n  load: () => dispatch(loadWeather())\n}))(WeatherList);\n","import React from 'react';\nimport {Provider} from 'react-redux';\nimport {applyMiddleware, createStore} from 'redux';\nimport {reducer} from './reducers/weather';\nimport thunk from 'redux-thunk';\nimport './App.css';\nimport WeatherList from \"./components/weatherList/WeatherList\";\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nfunction App() {\n  return (\n      <Provider store={store}>\n        <WeatherList />\n      </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}