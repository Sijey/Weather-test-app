{"version":3,"sources":["api/api.js","actions/weather.js","reducers/weather.js","components/card/Card.js","components/weatherList/WeatherList.js","components/searchBar/SearchBar.js","App.js","index.js"],"names":["loadData","url","fetch","then","response","json","API","linkProps","WEATHER_ACTIONS","loadWeather","dispatch","getState","city","state","cityName","getCity","Promise","all","weather","dailyData","list","filter","reading","dt_txt","includes","forecast","type","handleWeatherWithForecast","catch","payload","initialState","hasError","CardItem","day","ms","dt","dayName","Date","toLocaleDateString","weekday","month","imgURL","id","Card","className","Content","Header","Meta","Math","round","main","temp","Description","description","connect","error","load","useEffect","Message","negative","Divider","Button","onClick","name","map","key","Loader","active","inline","addCity","Form","onSubmit","Input","size","onChange","event","target","value","color","store","createStore","action","applyMiddleware","thunk","App","ReactDOM","render","document","getElementById"],"mappings":"gVAAaA,EAAW,SAAAC,GAAG,OAAIC,MAAMD,GAChCE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,WCCzBC,EAAM,2CACNC,EAAY,yCAGLC,EACK,iBADLA,EAEG,eAFHA,EAGD,WAmBCC,EAAc,WACzB,OAAO,SAACC,EAAUC,GAChB,IAEMC,EADU,SAAAC,GAAK,OAAIA,EAAMC,SAClBC,CAFCJ,KAGdK,QAAQC,IAAI,CAACjB,EAAS,GAAD,OAAIM,EAAJ,qBAAoBM,EAAOL,EA7B1B,qCA8BFP,EAAS,GAAD,OAAIM,EAAJ,sBAAqBM,EAAOL,EA9BlC,uCA+BjBJ,MAAK,YAA0B,IAAD,mBAAvBe,EAAuB,KACrBC,EADqB,KACAC,KAAKC,QAAO,SAAAC,GAAO,OAAIA,EAAQC,OAAOC,SAAS,eAC1Ed,EAf6B,SAACQ,EAASO,GAAV,MAAwB,CAC/DC,KAAMlB,EACNU,UACAO,YAYmBE,CAA0BT,EAASC,OAE/CS,OAAM,kBAAMlB,EA3BW,CAC9BgB,KAAMlB,EACNqB,QAyBwC,wB,ykBCrC1C,IAAMC,EAAe,CACnBC,SAAU,KACVb,QAAS,KACTO,SAAU,GACVX,SAAU,W,+DCgBGkB,G,OAlBE,SAAC,GAAW,IAAVC,EAAS,EAATA,IAEXC,EAAc,IAATD,EAAIE,GACTC,EAAU,IAAIC,KAAKH,GAAII,mBAAmB,KAAM,CAACC,QAAS,QAASN,IAAK,UAAWO,MAAO,SAC1FC,EAAS,WAAaR,EAAIf,QAAQ,GAAGwB,GAAK,UAEhD,OACE,kBAACC,EAAA,EAAD,CAAMC,UAAU,cACd,kBAACD,EAAA,EAAKE,QAAN,KACE,kBAACF,EAAA,EAAKG,OAAN,KAAcV,GACd,uBAAGQ,UAAWH,IACd,kBAACE,EAAA,EAAKI,KAAN,KAAYC,KAAKC,MAAMhB,EAAIiB,KAAKC,MAAhC,UACA,kBAACR,EAAA,EAAKS,YAAN,KAAmBnB,EAAIf,QAAQ,GAAGmC,iBCsB3BC,G,OAAAA,aAAQ,SAAAzC,GAAK,MAAK,CAC/BK,QAASL,EAAMK,QACfqC,MAAO1C,EAAMkB,SACbN,SAAUZ,EAAMY,aACd,SAAAf,GAAQ,MAAK,CACf8C,KAAM,SAAC5C,GAAD,OAAUF,EAASD,SALZ6C,EA/BK,SAAC,GAAsC,IAArCpC,EAAoC,EAApCA,QAASO,EAA2B,EAA3BA,SAAU8B,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,KAM9C,GAJAC,qBAAU,WACRD,MACC,CAACA,IAEAD,EACF,OACE,kBAACG,EAAA,EAAD,CAASC,UAAQ,GACf,kBAACD,EAAA,EAAQZ,OAAT,KAAiBS,GACjB,kBAACK,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAQC,QAASN,GAAjB,cAGC,GAAItC,GAAWO,EAAU,CAK9B,OACE,6BACE,wBAAImB,UAAU,aAAd,oCAAmC1B,EAAQ6C,MAC3C,yBAAKnB,UAAU,WAAU,kBAAC,EAAD,CAAUX,IAAKf,KACxC,yBAAK0B,UAAU,YAPVnB,EAASuC,KAAI,SAAC/B,EAAKS,GAAN,OAAa,kBAAC,EAAD,CAAUT,IAAKA,EAAKgC,IAAKvB,SAW5D,OAAO,kBAACwB,EAAA,EAAD,CAAQtB,UAAU,eAAeuB,QAAM,EAACC,OAAO,iB,kBClB3Cd,cAAQ,MAAM,SAAA5C,GAAQ,MAAK,CACxC8C,KAAM,kBAAM9C,EAASD,MACrB4D,QAAS,SAAAzD,GAAI,OAAIF,EJDI,SAACE,GAAD,MAAW,CAChCc,KAAMlB,EACNI,QID0ByD,CAAQzD,QAFrB0C,EAXG,SAAC,GAAqB,IAApBE,EAAmB,EAAnBA,KAAMa,EAAa,EAAbA,QACxB,OACE,kBAACC,EAAA,EAAD,CAAM1B,UAAU,aAAa2B,SAAUf,GACrC,kBAACgB,EAAA,EAAD,KACE,kBAACA,EAAA,EAAD,CAAO9C,KAAK,OAAO+C,KAAK,QAAQC,SAAU,SAAAC,GAAK,OAAIN,EAAQM,EAAMC,OAAOC,UACxE,kBAAChB,EAAA,EAAD,CAAQnC,KAAK,SAAS+C,KAAK,QAAQK,MAAM,SAAzC,8FCDFC,EAAQC,aJAU,WAAmC,IAAlCnE,EAAiC,uDAAzBiB,EAAcmD,EAAW,uCACxD,OAAQA,EAAOvD,MACb,KAAKlB,EACH,OAAO,EAAP,GACKK,EADL,CAEEkB,SAAUkD,EAAOpD,UAErB,KAAKrB,EACH,OAAO,EAAP,GACKK,EADL,CAEEK,QAAS+D,EAAO/D,QAChBO,SAAUwD,EAAOxD,SACjBM,SAAU,OAEd,KAAKvB,EACH,OAAO,EAAP,GACKK,EADL,CAEEC,SAAUmE,EAAOrE,OAErB,QACE,OAAOC,KIpBsBqE,YAAgBC,MAapCC,MAXf,WACE,OACE,kBAAC,IAAD,CAAUL,MAAOA,GACf,yBAAKnC,UAAU,WACb,kBAAC,EAAD,MACA,kBAAC,EAAD,SCVRyC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.ef193570.chunk.js","sourcesContent":["export const loadData = url => fetch(url)\n    .then(response => response.json());\n","import {loadData} from '../api/api';\n\nconst API = 'https://api.openweathermap.org/data/2.5/';\nconst linkProps = '&units=metric&lang=ru&mode=json&appid=';\nconst openWeatherApiKey = 'c792484ade42380886f51003cfcaf04d';\n\nexport const WEATHER_ACTIONS = {\n  HANDLE_SUCCESS: 'HANDLE_SUCCESS',\n  HANDLE_ERROR: 'HANDLE_ERROR',\n  ADD_CITY: 'ADD_CITY',\n};\n\nconst handleError = (error) => ({\n  type: WEATHER_ACTIONS.HANDLE_ERROR,\n  payload: error,\n});\n\nexport const addCity = (city) => ({\n  type: WEATHER_ACTIONS.ADD_CITY,\n  city,\n});\n\nexport const handleWeatherWithForecast = (weather, forecast) => ({\n  type: WEATHER_ACTIONS.HANDLE_SUCCESS,\n  weather,\n  forecast,\n});\n\nexport const loadWeather = () => {\n  return (dispatch, getState) => {\n    const state = getState();\n    const getCity = state => state.cityName;\n    const city = getCity(state);\n    Promise.all([loadData(`${API}weather?q=${city + linkProps + openWeatherApiKey}`),\n                        loadData(`${API}forecast?q=${city + linkProps + openWeatherApiKey}`)])\n        .then(([weather, forecast]) => {\n            const dailyData = forecast.list.filter(reading => reading.dt_txt.includes('06:00:00'));\n            dispatch(handleWeatherWithForecast(weather, dailyData));\n        })\n        .catch(() => dispatch(handleError('Loading failed')));\n  }\n};\n","import {WEATHER_ACTIONS} from '../actions/weather';\n\nconst initialState = {\n  hasError: null,\n  weather: null,\n  forecast: [],\n  cityName: 'kharkiv',\n};\n\n export const reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case WEATHER_ACTIONS.HANDLE_ERROR:\n      return {\n        ...state,\n        hasError: action.payload,\n      };\n    case WEATHER_ACTIONS.HANDLE_SUCCESS:\n      return {\n        ...state,\n        weather: action.weather,\n        forecast: action.forecast,\n        hasError: null\n      };\n    case WEATHER_ACTIONS.ADD_CITY:\n      return {\n        ...state,\n        cityName: action.city,\n      };\n    default:\n      return state;\n  }\n};\n","import React from 'react';\nimport {Card} from 'semantic-ui-react';\nimport './Card.css';\n\nconst CardItem = ({day}) => {\n\n  const ms = day.dt * 1000;\n  const dayName = new Date(ms).toLocaleDateString('ru', {weekday: 'short', day: 'numeric', month: 'long'});\n  const imgURL = \"owf owf-\" + day.weather[0].id + \" owf-3x\";\n\n  return (\n    <Card className='claim_card'>\n      <Card.Content>\n        <Card.Header>{dayName}</Card.Header>\n        <i className={imgURL}/>\n        <Card.Meta>{Math.round(day.main.temp)} °C</Card.Meta>\n        <Card.Description>{day.weather[0].description}</Card.Description>\n      </Card.Content>\n    </Card>\n  )\n};\n\nexport default CardItem;\n","import React, {useEffect} from 'react';\nimport {connect} from 'react-redux';\nimport {loadWeather} from '../../actions/weather';\nimport {Message, Divider, Button, Loader} from 'semantic-ui-react';\nimport CardItem from '../card/Card';\nimport './WeatherList.css';\n\nconst WeatherList = ({weather, forecast, error, load}) => {\n\n  useEffect(() => {\n    load();\n  }, [load]);\n\n  if (error) {\n    return (\n      <Message negative>\n        <Message.Header>{error}</Message.Header>\n        <Divider />\n        <Button onClick={load}>Try again</Button>\n      </Message>\n    );\n  } else if (weather && forecast) {\n    const forecastCard = () => {\n      return forecast.map((day, id) => <CardItem day={day} key={id} />)\n    };\n\n    return (\n      <div>\n        <h1 className='city-name'> Город: {weather.name}</h1>\n        <div className='weather'><CardItem day={weather}/></div>\n        <div className='forecast'>{forecastCard()}</div>\n      </div>\n    )\n  } else {\n    return <Loader className='claim_loader' active inline='centered' />\n  }\n};\n\nexport default connect(state => ({\n  weather: state.weather,\n  error: state.hasError,\n  forecast: state.forecast,\n}), dispatch => ({\n  load: (city) => dispatch(loadWeather(city)),\n}))(WeatherList);\n","import React from 'react';\nimport {Button, Form, Input} from \"semantic-ui-react\";\nimport {connect} from \"react-redux\";\nimport {addCity, loadWeather} from \"../../actions/weather\";\n\nconst SearchBar = ({load, addCity}) => {\n  return (\n    <Form className='search_bar' onSubmit={load}>\n      <Input>\n        <Input type='text' size='small' onChange={event => addCity(event.target.value)} />\n        <Button type='submit' size='small' color='green'>Получить погоду</Button>\n      </Input>\n    </Form>\n  );\n};\n\nexport default connect(null, dispatch => ({\n  load: () => dispatch(loadWeather()),\n  addCity: city => dispatch(addCity(city)),\n}))(SearchBar);\n","import React from 'react';\nimport {Provider} from 'react-redux';\nimport {applyMiddleware, createStore} from 'redux';\nimport {reducer} from './reducers/weather';\nimport thunk from 'redux-thunk';\nimport './App.css';\nimport WeatherList from \"./components/weatherList/WeatherList\";\nimport SearchBar from \"./components/searchBar/SearchBar\";\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className='wrapper'>\n        <SearchBar />\n        <WeatherList />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}